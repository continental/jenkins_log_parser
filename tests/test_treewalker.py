
import unittest
import os
import json
from jenkins_log_parser.buildlog import BuildLog
from jenkins_log_parser.treewalker import TreeWalker


class TestTreeWalker(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.buildlog = BuildLog(
            os.path.join(
                os.path.dirname(
                    os.path.realpath(__file__)
                ),
                "input_data"
            )
        )
        cls.buildlog.collect_nodes()

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_walk(self):
        walker = TreeWalker(
            self.buildlog.nodes,
            self.buildlog.create_tree()
        )
        node_list = list()
        current = walker.next()
        while current is not None:
            node_list.append(current.parent_id)
            current = walker.next()
        node_list.remove(None)

        print(json.dumps(node_list))

        index = [i for i, j in enumerate(node_list) if j == 119][0]
        print(index)
        value = node_list[index+1]

        self.assertEqual(value, 126)
        self.assertListEqual(
            [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 133, 134, 144, 156, 157, 158, 160, 163, 165, 166, 169, 175, 176, 177, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 710, 712, 713, 714, 715, 716, 717, 724, 725, 726, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 748, 750, 751, 752, 753, 754, 757, 760, 761, 762, 764, 765, 766, 768, 769, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 820, 821, 822, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 119, 127, 141, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 576, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 119, 128, 135, 136, 145, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 119, 129, 137, 138, 146, 164, 167, 168, 170, 171, 172, 173, 174, 179, 182, 183, 193, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 361, 362, 363, 364, 365, 373, 375, 376, 377, 378, 379, 380, 382, 386, 387, 389, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 119, 130, 142, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 119, 131, 143, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 609, 610, 611, 612, 613, 614, 652, 653, 654, 655, 656, 657, 658, 659, 660, 119, 132, 139, 140, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 162, 249, 263, 264, 266, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 360, 366, 367, 368, 369, 370, 371, 372, 374, 381, 383, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 702, 705, 708, 709, 711, 718, 719, 720, 721, 722, 723, 727, 728, 730, 742, 745, 746, 747, 749, 755, 756, 758, 759, 763, 767, 770, 771, 772, 774, 784, 786, 787, 788, 789, 799, 801, 802, 803, 804, 814, 816, 818, 819, 823, 825, 826, 827, 828, 856, 857, 876, 975, 976, 977, 978, 979, 980, 981, 982, 983],  # noqa
            node_list
        )

    def test_parental_issues(self):
        walker = TreeWalker(
            self.buildlog.nodes,
            self.buildlog.create_tree()
        )
        self.assertTrue(walker.is_parent_node_of(119, 126))
        self.assertTrue(walker.is_parent_node_of(5, 126))
        awaited_list = [119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]  # noqa
        print(awaited_list)
        actual_lognode_list = walker.list_parents(126)
        actual_lognode_list.remove(None)
        actual_list = list()
        for n in actual_lognode_list:
            actual_list.append(n.node_no)
        print(actual_list)
        self.maxDiff = None
        for i, _ in enumerate(awaited_list):
            print("%d: %d - %d" % (i, awaited_list[i], actual_list[i]))
        self.assertListEqual(awaited_list, actual_list)
